resolution_lc = str_to_lower(`Resolution Description`, locale = "en"),
inspected = str_detect(resolution_lc, "inspection|inspected"),
violation = str_detect(resolution_lc, "violation"),
mitigated = str_detect(resolution_lc,
"bait applied|baiting completed|abated|treated|problem corrected|resolved")
)
# ── 2) collapse into funnel counts ──────────────────────────────────────────
funnel_df <- rats_flagged %>%
summarise(
Calls        = n(),                                # total 311 calls
Inspections  = sum(inspected,  na.rm = TRUE),
Violations   = sum(violation,  na.rm = TRUE),
Mitigations  = sum(mitigated,  na.rm = TRUE)
) %>%
pivot_longer(everything(),
names_to  = "stage",
values_to = "n") %>%
mutate(pct_of_calls = n / first(n) * 100)            # % of initial calls
write_csv(funnel_df, "output/rat_funnel.csv")
View(funnel_df)
# ── libraries ──────────────────────────────────────────────────────────
library(readr)
library(dplyr)
library(stringr)
library(tidyr)
library(lubridate)
# ── 1) load the two source files ───────────────────────────────────────
rats <- read_csv("data/processed/rats_clean.csv", show_col_types = FALSE)
insp <- read_csv("data/raw/Rodent_Inspection_20250611.csv",
show_col_types = FALSE)
# ── 2) basic wrangle of inspections ────────────────────────────────────
insp_clean <- insp %>%
mutate(
result_lc   = str_to_lower(result, locale = "en"),
inspected   = TRUE,                                   # every row *is* an inspection
violation   = novissued == "Y" | str_detect(result_lc, "failed|nov"),
mitigated   = str_detect(result_lc, "bait applied|passed|abated|treated")
) %>%
select(inspectionid, inspected, violation, mitigated)
names(insp)
# ====================================================================== #
# 032_build_funnel.R  ——  quick inspection funnel for Section 4
# ====================================================================== #
# ── libraries ───────────────────────────────────────────────────────────
library(readr)     # fast CSV I/O
library(dplyr)     # data wrangle
library(stringr)   # regex helpers
library(tidyr)     # pivot_longer
library(janitor)   # clean_names()
install.packages(c("readr", "dplyr", "stringr", "tidyr", "janitor"))
# ── libraries ───────────────────────────────────────────────────────────
library(readr)     # fast CSV I/O
library(dplyr)     # data wrangle
library(stringr)   # regex helpers
library(tidyr)     # pivot_longer
library(janitor)   # clean_names()
#install.packages(c("readr", "dplyr", "stringr", "tidyr", "janitor"))
# ── libraries ───────────────────────────────────────────────────────────
library(readr)     # fast CSV I/O
library(dplyr)     # data wrangle
library(stringr)   # regex helpers
library(tidyr)     # pivot_longer
library(janitor)   # clean_names()
# ── 1) load the two source files ────────────────────────────────────────
rats <- read_csv("data/processed/rats_clean.csv", show_col_types = FALSE)
insp <- read_csv("data/raw/Rodent_Inspection_20250611.csv",
show_col_types = FALSE) |>
janitor::clean_names()           # RESULT → result, JOB_ID → job_id, …
# ── 2) derive Boolean flags for each inspection row ─────────────────────
insp_flagged <- insp |>
mutate(
result_lc  = stringr::str_to_lower(result, locale = "en"),
inspected  = TRUE,  # every row is an inspection
violation  = str_detect(result_lc, "failed|nov") &
!str_detect(result_lc, "no violation"),
mitigated  = str_detect(result_lc,
"bait applied|passed|abated|treated|problem corrected")
)
# ── 3) funnel counts from inspections ───────────────────────────────────
insp_counts <- insp_flagged |>
summarise(
Inspections = n(),
Violations  = sum(violation),
Mitigations = sum(mitigated)
)
# ── 4) total 311 calls from rats_clean ──────────────────────────────────
call_count <- nrow(rats)
# ── 5) assemble the four-stage funnel table ─────────────────────────────
funnel_df <- bind_rows(
tibble(stage = "Calls", n = call_count),
insp_counts |>
pivot_longer(everything(), names_to = "stage", values_to = "n")
) |>
mutate(pct_of_calls = round(n / first(n) * 100, 1))
# ── 6) write out for Tableau ────────────────────────────────────────────
dir.create("output", showWarnings = FALSE)
write_csv(funnel_df, "output/rat_funnel.csv")
# ── done ────────────────────────────────────────────────────────────────
print(funnel_df)
View(funnel_df)
View(insp_counts)
View(insp)
#install.packages(c("readr", "dplyr", "stringr", "tidyr", "janitor"))
library(readr)
library(dplyr)
library(stringr)
library(tidyr)
library(janitor)
# ── 1) load the two source files ────────────────────────────────────────
rats <- read_csv("data/processed/rats_clean.csv", show_col_types = FALSE)
insp <- read_csv("data/raw/Rodent_Inspection_20250611.csv",
show_col_types = FALSE) |>
janitor::clean_names()          # RESULT → result, JOB_ID → job_id, …
# ── 2) derive Boolean flags for each inspection row ─────────────────────
insp_flagged <- insp |>
mutate(
result_lc  = stringr::str_to_lower(result, locale = "en"),
inspected  = TRUE,   # every row represents an inspection
violation  = str_detect(result_lc, "failed|nov") &
!str_detect(result_lc, "no violation"),
mitigated  = str_detect(result_lc,
"bait applied|passed|abated|treated|problem corrected")
) |>
# replace remaining NAs with FALSE so sums don’t drop to NA
mutate(across(c(violation, mitigated),
~ tidyr::replace_na(.x, FALSE)))
# ── 3) funnel counts from inspections ───────────────────────────────────
insp_counts <- insp_flagged |>
summarise(
Inspections = n(),
Violations  = sum(violation,  na.rm = TRUE),
Mitigations = sum(mitigated,  na.rm = TRUE)
)
# ── 4) total 311 calls from rats_clean ──────────────────────────────────
call_count <- nrow(rats)
# ── 5) assemble four-stage funnel table ─────────────────────────────────
funnel_df <- bind_rows(
tibble(stage = "Calls", n = call_count),
insp_counts |>
pivot_longer(everything(), names_to = "stage", values_to = "n")
) |>
mutate(pct_of_calls = round(n / first(n) * 100, 1))
# ── 6) write out for Tableau ────────────────────────────────────────────
dir.create("output", showWarnings = FALSE)
write_csv(funnel_df, "output/rat_funnel.csv")
print(funnel_df)
View(funnel_df)
#install.packages(c("readr", "dplyr", "stringr", "tidyr", "janitor"))
# ── libraries ────────────────────────────────────────────────────────────────
library(readr)
library(dplyr)
library(stringr)
library(janitor)
library(tidyr)
# ── 1) load & clean the two datasets ─────────────────────────────────────────
rats <- read_csv("data/processed/rats_clean.csv", show_col_types = FALSE) |>
janitor::clean_names()                    # bbl, unique_key, ...
insp <- read_csv("data/raw/Rodent_Inspection_20250611.csv",
show_col_types = FALSE) |>
janitor::clean_names()                    # bbl, inspection_date, result, ...
# ── 2) flag inspections with Boolean columns ────────────────────────────────
insp_flagged <- insp |>
mutate(
result_lc = str_to_lower(result, locale = "en"),
inspected = TRUE,                                   # every row = an inspection
violation = str_detect(result_lc, "failed|nov") &
!str_detect(result_lc, "no violation"),
mitigated = str_detect(result_lc,
"bait applied|passed|abated|treated|problem corrected")
) |>
# replace missing logicals with FALSE so sums work
mutate(across(c(violation, mitigated), ~ replace_na(.x, FALSE)))
# ── 3) collapse inspections to one row per BBL ──────────────────────────────
insp_per_bbl <- insp_flagged |>
arrange(bbl, inspection_date) |>
group_by(bbl) |>
summarise(
inspected  = TRUE,                 # any row means inspected
violation  = any(violation),
mitigated  = any(mitigated),
.groups = "drop"
)
# ── 4) join the flags back to each 311 call (by BBL) ────────────────────────
calls_flagged <- rats |>
select(call_id   = unique_key,
created_dt,
bbl) |>
left_join(insp_per_bbl, by = "bbl") |>
mutate(
inspected  = replace_na(inspected,  FALSE),
violation  = replace_na(violation,  FALSE),
mitigated  = replace_na(mitigated,  FALSE)
)
# ── 5) compute funnel counts ────────────────────────────────────────────────
funnel_df <- calls_flagged |>
summarise(
Calls       = n(),
Inspections = sum(inspected),
Violations  = sum(violation),
Mitigations = sum(mitigated)
) |>
pivot_longer(everything(),
names_to  = "stage",
values_to = "n") |>
mutate(pct_of_calls = round(n / first(n) * 100, 1))
# ── 6) write CSV for Tableau ────────────────────────────────────────────────
dir.create("output", showWarnings = FALSE)
write_csv(funnel_df, "output/rat_funnel.csv")
print(funnel_df)
View(calls_flagged)
View(funnel_df)
# ── libraries ───────────────────────────────────────────────────────────
library(readr)
library(dplyr)
library(stringr)
library(tidyr)
library(janitor)
# ── 1) load & clean the two source files ────────────────────────────────
rats <- read_csv("data/processed/rats_clean.csv", show_col_types = FALSE) |>
janitor::clean_names() |>
# Unique Key becomes unique_key; force to character
mutate(unique_key = as.character(unique_key))
insp <- read_csv("data/raw/Rodent_Inspection_20250611.csv",
show_col_types = FALSE) |>
janitor::clean_names() |>
# ensure ticket IDs line up
mutate(
job_ticket_or_work_order_id = as.character(job_ticket_or_work_order_id),
result_lc = str_to_lower(result, locale = "en")
)
# ── 2) flag each inspection row ──────────────────────────────────────────
insp_flagged <- insp |>
mutate(
inspected  = TRUE,    # every row is an inspection
violation  = str_detect(result_lc, "failed|nov") &
!str_detect(result_lc, "no violation"),
mitigated  = str_detect(result_lc,
"bait applied|passed|abated|treated|problem corrected")
) |>
# replace any NAs in our logical flags
mutate(across(c(violation, mitigated),
~ replace_na(.x, FALSE)))
# ── 3) join calls → inspections by SR number ─────────────────────────────
calls_with_flags <- rats |>
left_join(
insp_flagged,
by = c("unique_key" = "job_ticket_or_work_order_id")
) |>
# calls with no matching inspection get FALSE
mutate(
inspected = replace_na(inspected, FALSE),
violation = replace_na(violation, FALSE),
mitigated = replace_na(mitigated, FALSE)
)
# ── 4) build the funnel counts ───────────────────────────────────────────
funnel_df <- calls_with_flags |>
summarise(
Calls       = n(),
Inspections = sum(inspected),
Violations  = sum(violation),
Mitigations = sum(mitigated)
) |>
pivot_longer(
cols      = everything(),
names_to  = "stage",
values_to = "n"
) |>
mutate(pct_of_calls = round(n / first(n) * 100, 1))
# ── 5) write out for Tableau ─────────────────────────────────────────────
dir.create("output", showWarnings = FALSE)
write_csv(funnel_df, "output/rat_funnel.csv")
print(funnel_df)
library(readr)
library(dplyr)
library(stringr)
library(tidyr)
library(janitor)
library(lubridate)
# ── 1) load and sanitize ───────────────────────────────────────────────────
rats <- read_csv("data/processed/rats_clean.csv", show_col_types = FALSE) |>
janitor::clean_names() |>
mutate(
unique_key = as.character(unique_key),
created_dt = ymd_hms(created_dt)
)
insp <- read_csv("data/raw/Rodent_Inspection_20250611.csv",
show_col_types = FALSE) |>
janitor::clean_names() |>
mutate(
job_id           = as.character(job_ticket_or_work_order_id),
inspection_date  = ymd(inspection_date),
result_lc        = str_to_lower(result, locale = "en")
)
# ── 2) flag each inspection row ─────────────────────────────────────────────
insp_flagged <- insp |>
mutate(
inspected  = TRUE,
violation  = (novissued == "Y" | str_detect(result_lc, "failed|nov")) &
!str_detect(result_lc, "no violation"),
mitigated  = str_detect(result_lc,
"bait applied|passed|abated|treated|problem corrected")
) |>
select(job_id, bbl, inspection_date, inspected, violation, mitigated)
library(readr)
library(dplyr)
library(stringr)
library(tidyr)
library(janitor)
library(lubridate)
# 1) Load and clean both datasets
rats <- read_csv("data/processed/rats_clean.csv", show_col_types = FALSE) |>
janitor::clean_names() |>
mutate(
unique_key = as.character(unique_key),
created_dt = ymd_hms(created_dt)
)
insp <- read_csv("data/raw/Rodent_Inspection_20250611.csv",
show_col_types = FALSE) |>
janitor::clean_names() |>
mutate(
job_id          = as.character(job_ticket_or_work_order_id),
inspection_date = ymd(inspection_date),
result_lc       = str_to_lower(result, locale = "en")
)
# 2) Flag each inspection row
insp_flagged <- insp |>
mutate(
inspected = TRUE,
# Violation if RESULT mentions “failed” or “nov” but not “no violation”
violation = str_detect(result_lc, "failed|nov") &
!str_detect(result_lc, "no violation"),
# Mitigation if RESULT mentions baiting or passing
mitigated = str_detect(result_lc,
"bait applied|passed|abated|treated|problem corrected")
) |>
select(job_id, bbl, inspection_date, inspected, violation, mitigated)
# 3) Join calls to inspections by BBL & date
calls_with_insp <- rats |>
select(call_id = unique_key,
call_dt  = created_dt,
bbl) |>
left_join(insp_flagged, by = "bbl") |>
filter(!is.na(inspection_date) & inspection_date >= call_dt)
library(readr)
library(dplyr)
library(stringr)
library(janitor)
# 1) load calls and inspections
rats <- read_csv("data/processed/rats_clean.csv", show_col_types = FALSE) |>
janitor::clean_names() |>
mutate(call_id = as.character(unique_key))
insp <- read_csv("data/raw/Rodent_Inspection_20250611.csv", show_col_types = FALSE) |>
janitor::clean_names() |>
mutate(
bbl = as.character(bbl),
result_lc = str_to_lower(result, locale = "en")
)
# 2) derive sets of BBLs by stage
bbl_inspected  <- unique(insp$bbl)
bbl_violated   <- insp |>
filter(str_detect(result_lc, "failed|nov") & !str_detect(result_lc, "no violation")) |>
pull(bbl) |> unique()
bbl_mitigated  <- insp |>
filter(str_detect(result_lc, "bait applied|passed|abated|treated|problem corrected")) |>
pull(bbl) |> unique()
# 3) flag each call as TRUE/FALSE by whether its BBL appears in those sets
calls_flagged <- rats |>
transmute(
stage_call   = TRUE,
stage_insp   = bbl %in% bbl_inspected,
stage_violi  = bbl %in% bbl_violated,
stage_mitig  = bbl %in% bbl_mitigated
)
# 4) compute funnel counts
total_calls   <- nrow(calls_flagged)
inspections   <- sum(calls_flagged$stage_insp)
violations    <- sum(calls_flagged$stage_violi)
mitigations   <- sum(calls_flagged$stage_mitig)
funnel_df <- tibble(
stage = c("Calls", "Inspections", "Violations", "Mitigations"),
n     = c(total_calls, inspections, violations, mitigations)
) |>
mutate(pct_of_calls = round(n / first(n) * 100, 1))
# 5) write out for Tableau
dir.create("output", showWarnings = FALSE)
write_csv(funnel_df, "output/rat_funnel.csv")
print(funnel_df)
library(readr); library(dplyr); library(stringr); library(lubridate); library(janitor)
rats <- read_csv("data/processed/rats_clean.csv", show_col_types = FALSE) |>
clean_names() |>
mutate(call_id = as.character(unique_key),
call_dt = ymd_hms(created_dt),
bbl     = as.character(bbl))
insp <- read_csv("data/raw/Rodent_Inspection_20250611.csv", show_col_types = FALSE) |>
clean_names() |>
mutate(bbl = as.character(bbl),
insp_dt = ymd(inspection_date),
result_lc = str_to_lower(result))
# ── classify each inspection row
insp <- insp |>
mutate(
inspected  = TRUE,
violation  = str_detect(result_lc, "failed|nov") & !str_detect(result_lc, "no violation"),
mitigated  = str_detect(result_lc, "bait applied|passed|abated|treated|problem corrected")
)
# ── 1) merge by BBL first (smaller table) ----------------------------------
rats_on_bbl <- rats |> semi_join(insp, by = "bbl")      # drops calls with no inspection ever
# ── 2) do a date-band join (|call_dt − insp_dt| ≤ 30 days) -----------------
f <- function(call_dt) insp$insp_dt >= (call_dt - days(30)) &
insp$insp_dt <= (call_dt + days(30))
# For speed, loop vectorised rather than full cartesian join
flag_tbl <- rats_on_bbl |>
rowwise() |>
mutate(
tmp = list(insp[f(call_dt) & insp$bbl == bbl, c("inspected","violation","mitigated")]) ) |>
mutate(
inspected  = any(tmp$inspected,  na.rm = TRUE),
violation  = any(tmp$violation,  na.rm = TRUE),
mitigated  = any(tmp$mitigated,  na.rm = TRUE)
) |>
ungroup() |>
select(call_id, inspected, violation, mitigated)
gc()
gc()
library(readr)
library(dplyr)
library(stringr)
library(janitor)
# 1) load and clean inspection CSV
insp <- read_csv("data/raw/Rodent_Inspection_20250611.csv",
show_col_types = FALSE) |>
janitor::clean_names() |>
mutate(result_lc = str_to_lower(result, locale = "en"))
# 2) flag each row
insp_flagged <- insp |>
mutate(
inspected  = TRUE,    # every row is an inspection
violation  = str_detect(result_lc, "failed|nov") &
!str_detect(result_lc, "no violation"),
mitigated  = str_detect(result_lc,
"bait applied|passed|abated|treated|problem corrected")
)
# 3) funnel counts
funnel_df <- tibble(
stage = c("Inspections", "Violations", "Mitigations"),
n     = c(
total_insp = nrow(insp_flagged),
sum(insp_flagged$violation,  na.rm = TRUE),
sum(insp_flagged$mitigated,  na.rm = TRUE)
)
) |>
mutate(pct_of_insp = round(n / first(n) * 100, 1))
# 4) write out for Tableau
dir.create("output", showWarnings = FALSE)
write_csv(funnel_df, "output/inspection_funnel.csv")
print(funnel_df)
View(funnel_df)
library(data.table)
library(stringr)   # for str_detect
library(lubridate) # easy date math
# ── 1) load 311 calls  &  DOHMH inspections ────────────────────────────
rats <- fread("data/processed/rats_clean.csv")
insp <- fread("data/raw/Rodent_Inspection_20250611.csv")
#  clean names you need
setnames(rats, c("Unique Key",   "created_dt", "BBL"),
c("call_id",      "created_dt", "bbl"))
setnames(insp, c("BBL", "INSPECTION_DATE",   "RESULT"),
c("bbl", "inspection_date",   "result"))
#  keep only needed cols
rats <- rats[, .(call_id = as.character(call_id),
bbl     = as.character(bbl),
call_dt = ymd_hms(created_dt))]
insp <- insp[, .(bbl     = as.character(bbl),
insp_dt = ymd(inspection_date),
result_lc = tolower(result))]
# ── 2) flag each inspection row ────────────────────────────────────────
insp[, inspected := TRUE ]
insp[, violation := str_detect(result_lc, "failed|nov") &
!str_detect(result_lc, "no violation") ]
# ── 3) non-equi join: one inspection per call within ±30 days ──────────
setkey(insp, bbl, insp_dt)          # data.table wants a key
# add 30-day window boundaries
rats[, low  := call_dt - days(30)]
rats[, high := call_dt + days(30)]
matched <- insp[rats,              # right join (calls table order kept)
on = .(bbl,
insp_dt >= low,
insp_dt <= high),
mult = "first",    # take FIRST inspection that meets window
nomatch = 0L]      # unmatched calls handled later
# ── 4) collapse flags per call (one row each) ──────────────────────────
flags <- matched[, .(inspected = TRUE,
violation = any(violation)),
by = call_id]
# calls with no match get FALSE flags
funnel <- merge(
rats[, .(call_id)], flags,
by = "call_id", all.x = TRUE
)[is.na(inspected),   inspected := FALSE
][is.na(violation),  violation := FALSE]
# ── 5) funnel counts  ---------------------------------------------------
Counts <- data.table(
stage = c("Calls", "Inspections", "Violations"),
n     = c(nrow(funnel),
sum(funnel$inspected),
sum(funnel$violation))
)
Counts[, pct_of_calls := round(n / n[stage == "Calls"] * 100, 1)]
# ── 6) write for Tableau  ----------------------------------------------
dir.create("output", showWarnings = FALSE)
fwrite(Counts, "output/rat_funnel.csv")
print(Counts)
